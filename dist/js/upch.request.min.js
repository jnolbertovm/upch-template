"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * ------------------------------------------------------------------------
 * Request Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */
var UPCH_REQUEST_NAME = 'upch-request';
var UPCH_REQUEST_VERSION = '1.0';
var UPCH_REQUEST_DATA_KEY = 'upch.request';
var UPCH_REQUEST_EVENT_KEY = ".".concat(UPCH_REQUEST_DATA_KEY);

var UpchRequest =
/*#__PURE__*/
function () {
  function UpchRequest() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, UpchRequest);

    this._options = this._setOptions(options);
    this._request = this._create();
  }

  _createClass(UpchRequest, [{
    key: "post",
    value: function post(url, data) {
      return this._request.post(url, data).then(function (response) {
        return response.data;
      });
    }
  }, {
    key: "get",
    value: function get(url) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this._request.get(url, _objectSpread({
        params: params
      }, this._options)).then(function (response) {
        return response.data;
      });
    }
  }, {
    key: "_setOptions",
    value: function _setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var config = _objectSpread({
        baseURL: UPCH.baseUrl
      }, UPCH.params.axios, {}, options);

      return config;
    }
  }, {
    key: "_create",
    value: function _create() {
      return axios.create(this._options);
    }
  }, {
    key: "Options",
    get: function get() {
      return this._options;
    }
  }]);

  return UpchRequest;
}();