"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var UPCH = {
  protocol: window.location.protocol,

  get hostname() {
    return "".concat(this.protocol, "//").concat(window.location.host);
  },

  get baseUrl() {
    var url = "".concat(this.hostname).concat(window.location.pathname);
    return url.substring(0, url.lastIndexOf("/"));
  },

  params: {
    modal: {
      backdrop: 'static',
      keyboard: false,
      focus: true,
      show: false
    },
    bootstrapTable: {
      escape: false,
      locale: 'es-SP',
      search: true,
      searchAlign: 'right',
      showRefresh: true,
      buttonsAlign: 'right',
      sortOrder: "desc",
      sortable: true,
      pagination: true,
      pageSize: 20,
      classes: 'upch-table upch-table--sm table table-sm',
      theadClasses: 'upch-table__header',
      footerStyle: 'upch-table__footer',
      buttonsClass: 'light',
      iconsPrefix: 'fa',
      iconSize: 'sm',
      icons: {
        paginationSwitchDown: 'fa-caret-square-down',
        paginationSwitchUp: 'fa-caret-square-up',
        refresh: 'fa-sync',
        toggleOff: 'fa-toggle-off',
        toggleOn: 'fa-toggle-on',
        columns: 'fa-th-list',
        fullscreen: 'fa-arrows-alt',
        detailOpen: 'fa-plus',
        detailClose: 'fa-minus'
      }
    },
    axios: {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      },
      transformRequest: function transformRequest(data, headers) {
        if (_typeof(data) === 'object') {
          return UPCH.utils.objectToFormData(data);
        }

        return data;
      }
    }
  },
  utils: {
    isObjectEmpty: function isObjectEmpty() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();
      return Object.entries(data).length === 0 && data.constructor === Object;
    },
    isElement: function isElement(element) {
      return (element[0] || element).nodeType === 1;
    },
    isInput: function isInput(element) {
      return this.isElement(element) && element.nodeName === 'INPUT';
    },
    isFormElement: function isFormElement(element) {
      var elementType = '(INPUT|SELECT|TEXTAREA)';
      return this.isElement(element) && new RegExp(elementType).test(element.nodeName);
    },
    setValueElement: function setValueElement(element, value) {
      if (this.isFormElement(element)) {
        throw TypeError("parametro element corresponde a un elemento de formulario");
      }

      element.innerHTML = value;
    },
    setValueFormElement: function setValueFormElement(element, value) {
      if (this.isInput(element)) {
        this.setValueInput(element, value);
      } else {
        element.value = value;
      }
    },
    setValueInput: function setValueInput(element, value) {
      switch (element.type) {
        case 'checkbox':
          if (Array.isArray(value)) {
            element.checked = value.includes(parseInt(element.value));
          } else if (typeof value === 'boolean') {
            element.value = +value;
            element.checked = value;
          }

          break;

        case 'radio':
          element.checked = element.value === value;
          break;

        default:
          element.value = value;
      }
    },
    objectToFormData: function objectToFormData() {
      var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.isObjectEmpty(object)) {
        throw TypeError("El objecto no puede estar vacio");
      }

      var data = new FormData();

      var setValue = function setValue(key, value, form) {
        var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (_typeof(value) === "object") {
          for (var i in value) {
            setValue(i, value[i], form, parent ? "".concat(parent, "[").concat(key, "]") : key);
          }
        } else {
          form.append(parent ? "".concat(parent, "[").concat(key, "]") : key, value);
        }

        return form;
      };

      for (var key in object) {
        setValue(key, object[key], data);
      }

      return data;
    }
  }
  /**
   * ------------------------------------------------------------------------
   * Request Plugin
   * 
   * @package Elements
   * @author  Jose Nolberto Vilchez Moreno
   * @version 1.0
   * ------------------------------------------------------------------------
   */

};
var UPCH_REQUEST_NAME = 'upch-request';
var UPCH_REQUEST_VERSION = '1.0';
var UPCH_REQUEST_DATA_KEY = 'upch.request';
var UPCH_REQUEST_EVENT_KEY = ".".concat(UPCH_REQUEST_DATA_KEY);

var UpchRequest =
/*#__PURE__*/
function () {
  function UpchRequest() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, UpchRequest);

    this._options = this._setOptions(options);
    this._request = this._create();
  }

  _createClass(UpchRequest, [{
    key: "post",
    value: function post(url, data) {
      return this._request.post(url, data).then(function (response) {
        return response.data;
      });
    }
  }, {
    key: "get",
    value: function get(url) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this._request.get(url, _objectSpread({
        params: params
      }, this._options)).then(function (response) {
        return response.data;
      });
    }
  }, {
    key: "_setOptions",
    value: function _setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var config = _objectSpread({
        baseURL: UPCH.baseUrl
      }, UPCH.params.axios, {}, options);

      return config;
    }
  }, {
    key: "_create",
    value: function _create() {
      return axios.create(this._options);
    }
  }, {
    key: "Options",
    get: function get() {
      return this._options;
    }
  }]);

  return UpchRequest;
}();
/**
 * ------------------------------------------------------------------------
 * Modal Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */


var UPCH_MODAL_NAME = 'upch-modal';
var UPCH_MODAL_VERSION = '1.0';
var UPCH_MODAL_DATA_KEY = 'upch.modal';
var UPCH_MODAL_EVENT_KEY = ".".concat(UPCH_MODAL_DATA_KEY);
var UPCH_MODAL_Default = {
  data: {},
  onClose: null,
  onOpen: null,
  beforeOpen: null,
  beforeClose: null
};
var UPCH_MODAL_Event = {
  HIDE: "hide",
  HIDDEN: "hidden",
  SHOW: "show",
  SHOWN: "shown",
  CLICK_DATA_API: "click".concat(UPCH_MODAL_EVENT_KEY).concat(UPCH_MODAL_DATA_KEY)
};
var UPCH_MODAL_Selector = {
  MODAL_HEADER: '.upch-modal__header',
  MODAL_TITLE: '.upch-modal__title',
  MODAL_BODY: '.upch-modal__body',
  MODAL_FOOTER: '.upch-modal__footer',
  DATA_FIELD: 'data-field'
};

var UpchModal =
/*#__PURE__*/
function () {
  function UpchModal(element) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, UpchModal);

    this._element = document.getElementById(element);
    this._options = this._setOptions(options);

    this._init();
  }

  _createClass(UpchModal, [{
    key: "setData",
    value: function setData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();

      if (UPCH.utils.isObjectEmpty(data)) {
        throw new Error("El paramatro no puede estar vacio");
      }

      this._options.data = data;

      this._loadData();
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      var elm = this._element.querySelector(UPCH_MODAL_Selector.MODAL_TITLE);

      if (UPCH.utils.isElement(elm)) {
        UPCH.utils.setValueElement(title);
      }
    }
  }, {
    key: "open",
    value: function open() {
      $(this._element).modal(UPCH_MODAL_Event.SHOW);
    }
  }, {
    key: "close",
    value: function close() {
      $(this._element).modal(UPCH_MODAL_Event.HIDE);
    }
  }, {
    key: "_setEvents",
    value: function _setEvents() {
      var _this = this;

      if (this._options.onOpen instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.SHOWN, ".bs.modal"), function () {
          _this._options.onOpen();
        });
      }

      if (this._options.beforeOpen instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.SHOW, ".bs.modal"), function () {
          _this._options.beforeOpen();
        });
      }

      if (this._options.onClose instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.HIDDEN, ".bs.modal"), function () {
          _this._options.onClose();
        });
      }

      if (this._options.beforeClose instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.HIDE, ".bs.modal"), function () {
          _this._options.beforeClose();
        });
      }
    }
  }, {
    key: "_setOptions",
    value: function _setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var config = _objectSpread({}, UPCH_MODAL_Default, {}, options);

      return config;
    }
  }, {
    key: "_loadData",
    value: function _loadData() {
      if (!UPCH.utils.isObjectEmpty(this._options.data)) {
        for (var field in this._options.data) {
          var valueType = '(string|boolean|object|number)';

          if (!new RegExp(valueType).test(_typeof(this._options.data[field]))) {
            throw TypeError("El valor de '".concat(field, "' no esta permitido"));
          }

          this._setValueField(field, this._options.data[field]);
        }
      }
    }
  }, {
    key: "_setValueField",
    value: function _setValueField(field, value) {
      var selector = "[".concat(UPCH_MODAL_Selector.DATA_FIELD, "=\"").concat(field, "\"]");

      var countNodes = this._element.querySelectorAll(selector).length;

      if (countNodes === 0) {
        return;
      } else if (countNodes === 1) {
        var elm = this._element.querySelector(selector);

        if (UPCH.utils.isFormElement(elm)) {
          UPCH.utils.setValueFormElement(elm, value);
        } else {
          UPCH.utils.setValueElement(elm, value);
        }
      } else {
        var elements = this._element.querySelectorAll(selector);

        elements.forEach(function (elm) {
          if (UPCH.utils.isFormElement(elm)) {
            UPCH.utils.setValueFormElement(elm, value);
          } else {
            UPCH.utils.setValueElement(elm, value);
          }
        });
      }
    }
  }, {
    key: "_init",
    value: function _init() {
      $(this._element).modal(UPCH.params.modal);

      this._setEvents();

      this._loadData();
    }
  }, {
    key: "Options",
    get: function get() {
      return this._options;
    }
  }, {
    key: "Data",
    get: function get() {
      return this._options.data;
    }
  }], [{
    key: "VERSION",
    get: function get() {
      return UPCH_MODAL_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return UPCH_MODAL_Default;
    }
  }]);

  return UpchModal;
}();
/**
 * ------------------------------------------------------------------------
 * Table Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */


var UPCH_TABLE_NAME = 'upch-table';
var UPCH_TABLE_VERSION = '1.0';
var UPCH_TABLE_DATA_KEY = 'upch.table';
var UPCH_TABLE_EVENT_KEY = ".".concat(UPCH_TABLE_DATA_KEY);
var UPCH_TABLE_Selector = {
  MODAL_HEADER: '.upch-table__header',
  MODAL_BODY: '.upch-table__body',
  MODAL_FOOTER: '.upch-table__footer'
};

var UpchTable =
/*#__PURE__*/
function () {
  function UpchTable(element) {
    _classCallCheck(this, UpchTable);

    this._element = document.getElementById(element);
    this._options = {};
  }

  _createClass(UpchTable, [{
    key: "getData",
    value: function getData() {
      return $(this._element).bootstrapTable("getData");
    }
  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._options = _objectSpread({}, UPCH.params.bootstrapTable, {}, options);
    }
  }, {
    key: "columns",
    value: function columns() {
      var _columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!Array.isArray(_columns) || _columns.length === 0) {
        throw TypeError("El parametro debe ser un array y no estar vacio");
      }

      this._options.columns = _columns;
    }
  }, {
    key: "_resetView",
    value: function _resetView() {
      if (this.getData().length >= this._options.pageSize) {
        $(this._element).bootstrapTable("resetView", {
          height: 700
        });
      }
    }
  }, {
    key: "_setLocationMessage",
    value: function _setLocationMessage() {
      var messages = _objectSpread({}, $(this._element).bootstrapTable.locales['es-ES'], {
        formatRecordsPerPage: function formatRecordsPerPage(pageNumber) {
          return "".concat(pageNumber, " filas por p\xE1gina");
        },
        formatShowingRows: function formatShowingRows(pageFrom, pageTo, totalRows, totalNotFiltered) {
          if (totalNotFiltered !== undefined && totalNotFiltered > 0 && totalNotFiltered > totalRows) {
            return "Mostrandolo desde ".concat(pageFrom, " hasta ").concat(pageTo, " - En total ").concat(totalRows, " resultados (filtered from ").concat(totalNotFiltered, " total rows)");
          }

          return "".concat(pageFrom, " - ").concat(pageTo, " de ").concat(totalRows);
        }
      });

      $.fn.bootstrapTable.locales['es-ES'] = messages;
      $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-ES']);
    }
  }, {
    key: "init",
    value: function init() {
      this._setLocationMessage();

      $(this._element).bootstrapTable(this._options);

      this._resetView();
    }
  }]);

  return UpchTable;
}();
/**
 * ------------------------------------------------------------------------
 * Dialog Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */
//@import-prepend "upch.js"
//@import-prepend "elements/upch.request.js"
//@import-prepend "elements/upch.modal.js"
//@import-prepend "elements/upch.table.js"
//@import-prepend "elements/upch.dialog.js"