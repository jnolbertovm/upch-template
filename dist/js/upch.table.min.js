"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * ------------------------------------------------------------------------
 * Table Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */
var UPCH_TABLE_NAME = 'upch-table';
var UPCH_TABLE_VERSION = '1.0';
var UPCH_TABLE_DATA_KEY = 'upch.table';
var UPCH_TABLE_EVENT_KEY = ".".concat(UPCH_TABLE_DATA_KEY);
var UPCH_TABLE_Selector = {
  MODAL_HEADER: '.upch-table__header',
  MODAL_BODY: '.upch-table__body',
  MODAL_FOOTER: '.upch-table__footer'
};

var UpchTable =
/*#__PURE__*/
function () {
  function UpchTable(element) {
    _classCallCheck(this, UpchTable);

    this._element = document.getElementById(element);
    this._options = {};
  }

  _createClass(UpchTable, [{
    key: "getData",
    value: function getData() {
      return $(this._element).bootstrapTable("getData");
    }
  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._options = _objectSpread({}, UPCH.params.bootstrapTable, {}, options);
    }
  }, {
    key: "columns",
    value: function columns() {
      var _columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!Array.isArray(_columns) || _columns.length === 0) {
        throw TypeError("El parametro debe ser un array y no estar vacio");
      }

      this._options.columns = _columns;
    }
  }, {
    key: "_resetView",
    value: function _resetView() {
      if (this.getData().length >= this._options.pageSize) {
        $(this._element).bootstrapTable("resetView", {
          height: 700
        });
      }
    }
  }, {
    key: "_setLocationMessage",
    value: function _setLocationMessage() {
      var messages = _objectSpread({}, $(this._element).bootstrapTable.locales['es-ES'], {
        formatRecordsPerPage: function formatRecordsPerPage(pageNumber) {
          return "".concat(pageNumber, " filas por p\xE1gina");
        },
        formatShowingRows: function formatShowingRows(pageFrom, pageTo, totalRows, totalNotFiltered) {
          if (totalNotFiltered !== undefined && totalNotFiltered > 0 && totalNotFiltered > totalRows) {
            return "Mostrandolo desde ".concat(pageFrom, " hasta ").concat(pageTo, " - En total ").concat(totalRows, " resultados (filtered from ").concat(totalNotFiltered, " total rows)");
          }

          return "".concat(pageFrom, " - ").concat(pageTo, " de ").concat(totalRows);
        }
      });

      $.fn.bootstrapTable.locales['es-ES'] = messages;
      $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-ES']);
    }
  }, {
    key: "init",
    value: function init() {
      this._setLocationMessage();

      $(this._element).bootstrapTable(this._options);

      this._resetView();
    }
  }]);

  return UpchTable;
}();