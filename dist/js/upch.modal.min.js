"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * ------------------------------------------------------------------------
 * Modal Plugin
 * 
 * @package Elements
 * @author  Jose Nolberto Vilchez Moreno
 * @version 1.0
 * ------------------------------------------------------------------------
 */
var UPCH_MODAL_NAME = 'upch-modal';
var UPCH_MODAL_VERSION = '1.0';
var UPCH_MODAL_DATA_KEY = 'upch.modal';
var UPCH_MODAL_EVENT_KEY = ".".concat(UPCH_MODAL_DATA_KEY);
var UPCH_MODAL_Default = {
  data: {},
  onClose: null,
  onOpen: null,
  beforeOpen: null,
  beforeClose: null
};
var UPCH_MODAL_Event = {
  HIDE: "hide",
  HIDDEN: "hidden",
  SHOW: "show",
  SHOWN: "shown",
  CLICK_DATA_API: "click".concat(UPCH_MODAL_EVENT_KEY).concat(UPCH_MODAL_DATA_KEY)
};
var UPCH_MODAL_Selector = {
  MODAL_HEADER: '.upch-modal__header',
  MODAL_TITLE: '.upch-modal__title',
  MODAL_BODY: '.upch-modal__body',
  MODAL_FOOTER: '.upch-modal__footer',
  DATA_FIELD: 'data-field'
};

var UpchModal =
/*#__PURE__*/
function () {
  function UpchModal(element) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, UpchModal);

    this._element = document.getElementById(element);
    this._options = this._setOptions(options);

    this._init();
  }

  _createClass(UpchModal, [{
    key: "setData",
    value: function setData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();

      if (UPCH.utils.isObjectEmpty(data)) {
        throw new Error("El paramatro no puede estar vacio");
      }

      this._options.data = data;

      this._loadData();
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      var elm = this._element.querySelector(UPCH_MODAL_Selector.MODAL_TITLE);

      if (UPCH.utils.isElement(elm)) {
        UPCH.utils.setValueElement(title);
      }
    }
  }, {
    key: "open",
    value: function open() {
      $(this._element).modal(UPCH_MODAL_Event.SHOW);
    }
  }, {
    key: "close",
    value: function close() {
      $(this._element).modal(UPCH_MODAL_Event.HIDE);
    }
  }, {
    key: "_setEvents",
    value: function _setEvents() {
      var _this = this;

      if (this._options.onOpen instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.SHOWN, ".bs.modal"), function () {
          _this._options.onOpen();
        });
      }

      if (this._options.beforeOpen instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.SHOW, ".bs.modal"), function () {
          _this._options.beforeOpen();
        });
      }

      if (this._options.onClose instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.HIDDEN, ".bs.modal"), function () {
          _this._options.onClose();
        });
      }

      if (this._options.beforeClose instanceof Function) {
        $(this._element).on("".concat(UPCH_MODAL_Event.HIDE, ".bs.modal"), function () {
          _this._options.beforeClose();
        });
      }
    }
  }, {
    key: "_setOptions",
    value: function _setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var config = _objectSpread({}, UPCH_MODAL_Default, {}, options);

      return config;
    }
  }, {
    key: "_loadData",
    value: function _loadData() {
      if (!UPCH.utils.isObjectEmpty(this._options.data)) {
        for (var field in this._options.data) {
          var valueType = '(string|boolean|object|number)';

          if (!new RegExp(valueType).test(_typeof(this._options.data[field]))) {
            throw TypeError("El valor de '".concat(field, "' no esta permitido"));
          }

          this._setValueField(field, this._options.data[field]);
        }
      }
    }
  }, {
    key: "_setValueField",
    value: function _setValueField(field, value) {
      var selector = "[".concat(UPCH_MODAL_Selector.DATA_FIELD, "=\"").concat(field, "\"]");

      var countNodes = this._element.querySelectorAll(selector).length;

      if (countNodes === 0) {
        return;
      } else if (countNodes === 1) {
        var elm = this._element.querySelector(selector);

        if (UPCH.utils.isFormElement(elm)) {
          UPCH.utils.setValueFormElement(elm, value);
        } else {
          UPCH.utils.setValueElement(elm, value);
        }
      } else {
        var elements = this._element.querySelectorAll(selector);

        elements.forEach(function (elm) {
          if (UPCH.utils.isFormElement(elm)) {
            UPCH.utils.setValueFormElement(elm, value);
          } else {
            UPCH.utils.setValueElement(elm, value);
          }
        });
      }
    }
  }, {
    key: "_init",
    value: function _init() {
      $(this._element).modal(UPCH.params.modal);

      this._setEvents();

      this._loadData();
    }
  }, {
    key: "Options",
    get: function get() {
      return this._options;
    }
  }, {
    key: "Data",
    get: function get() {
      return this._options.data;
    }
  }], [{
    key: "VERSION",
    get: function get() {
      return UPCH_MODAL_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return UPCH_MODAL_Default;
    }
  }]);

  return UpchModal;
}();