"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var UPCH = {
  protocol: window.location.protocol,

  get hostname() {
    return "".concat(this.protocol, "//").concat(window.location.host);
  },

  get baseUrl() {
    var url = "".concat(this.hostname).concat(window.location.pathname);
    return url.substring(0, url.lastIndexOf("/"));
  },

  params: {
    modal: {
      backdrop: 'static',
      keyboard: false,
      focus: true,
      show: false
    },
    bootstrapTable: {
      escape: false,
      locale: 'es-SP',
      search: true,
      searchAlign: 'right',
      showRefresh: true,
      buttonsAlign: 'right',
      sortOrder: "desc",
      sortable: true,
      pagination: true,
      pageSize: 20,
      classes: 'upch-table upch-table--sm table table-sm',
      theadClasses: 'upch-table__header',
      footerStyle: 'upch-table__footer',
      buttonsClass: 'light',
      iconsPrefix: 'fa',
      iconSize: 'sm',
      icons: {
        paginationSwitchDown: 'fa-caret-square-down',
        paginationSwitchUp: 'fa-caret-square-up',
        refresh: 'fa-sync',
        toggleOff: 'fa-toggle-off',
        toggleOn: 'fa-toggle-on',
        columns: 'fa-th-list',
        fullscreen: 'fa-arrows-alt',
        detailOpen: 'fa-plus',
        detailClose: 'fa-minus'
      }
    },
    axios: {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      },
      transformRequest: function transformRequest(data, headers) {
        if (_typeof(data) === 'object') {
          return UPCH.utils.objectToFormData(data);
        }

        return data;
      }
    }
  },
  utils: {
    isObjectEmpty: function isObjectEmpty() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();
      return Object.entries(data).length === 0 && data.constructor === Object;
    },
    isElement: function isElement(element) {
      return (element[0] || element).nodeType === 1;
    },
    isInput: function isInput(element) {
      return this.isElement(element) && element.nodeName === 'INPUT';
    },
    isFormElement: function isFormElement(element) {
      var elementType = '(INPUT|SELECT|TEXTAREA)';
      return this.isElement(element) && new RegExp(elementType).test(element.nodeName);
    },
    setValueElement: function setValueElement(element, value) {
      if (this.isFormElement(element)) {
        throw TypeError("parametro element corresponde a un elemento de formulario");
      }

      element.innerHTML = value;
    },
    setValueFormElement: function setValueFormElement(element, value) {
      if (this.isInput(element)) {
        this.setValueInput(element, value);
      } else {
        element.value = value;
      }
    },
    setValueInput: function setValueInput(element, value) {
      switch (element.type) {
        case 'checkbox':
          if (Array.isArray(value)) {
            element.checked = value.includes(parseInt(element.value));
          } else if (typeof value === 'boolean') {
            element.value = +value;
            element.checked = value;
          }

          break;

        case 'radio':
          element.checked = element.value === value;
          break;

        default:
          element.value = value;
      }
    },
    objectToFormData: function objectToFormData() {
      var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.isObjectEmpty(object)) {
        throw TypeError("El objecto no puede estar vacio");
      }

      var data = new FormData();

      var setValue = function setValue(key, value, form) {
        var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (_typeof(value) === "object") {
          for (var i in value) {
            setValue(i, value[i], form, parent ? "".concat(parent, "[").concat(key, "]") : key);
          }
        } else {
          form.append(parent ? "".concat(parent, "[").concat(key, "]") : key, value);
        }

        return form;
      };

      for (var key in object) {
        setValue(key, object[key], data);
      }

      return data;
    }
  }
};